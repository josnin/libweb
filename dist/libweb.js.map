{
  "version": 3,
  "sources": ["../src/enums.js", "../src/events.js", "../src/reactive.js", "../src/bindings.js", "../src/utils.js", "../src/template.js", "../src/libweb.js"],
  "sourcesContent": ["export const settings = {\n    ATTR_PREFIX: '@',\n    ATTR_REPLACE: 'data-on',\n    VAR_PARSE: { start: '{', end: '}' },\n};\n", "import { settings } from './enums.js';\nexport const createEventListener = (self) => {\n    const fnEvents = getEventsAttrFn(self);\n    fnEvents.forEach((fn) => {\n        // converted event listener\n        // self.shadowRoot.querySelector(`${fn.query}`).addEventListener(`${fn.event}`, e => {\n        //  console.log(eval(`self.${fn.fn}`)) // execute function\n        // }, true)\n        // use this approach to overwrite all listener instead of addEventListener\n        self.shadowRoot.querySelector(`${fn.query}`)[`${fn.event}`] = ($event) => {\n            eval(`self.${fn.fn.replaceAll('\\'$event\\'', '$event')}`); // execute function\n        };\n    });\n};\nexport const getEventsAttrFn = (self) => {\n    // replace attrs onclick -> data-onclick\n    const fnEvents = [];\n    const allElements = self.shadowRoot.querySelectorAll('*');\n    allElements.forEach((element) => {\n        for (const [_, attr] of Object.entries(element.attributes)) {\n            if (attr.name.startsWith(settings.ATTR_REPLACE)) {\n                const tmp = {\n                    query: `[${attr.name}]`,\n                    fn: attr.value,\n                    event: attr.name.split('-')[1] // data-onclick-id1 --> onclick\n                };\n                fnEvents.push(tmp);\n            }\n        }\n    });\n    return fnEvents;\n};\nexport default {\n    createEventListener,\n    getEventsAttrFn\n};\n", "export const createReactive = (self, varObj, events, templates) => {\n    // react when there is a changes in value\n    // const allElements = self.shadowRoot.querySelectorAll('[data-bind]');\n    const allElements = self.shadowRoot.querySelectorAll('*');\n    const handler = {\n        get: (varObj, prop) => {\n            return varObj[prop];\n        },\n        set: (varObj, prop, value) => {\n            allElements.forEach((element) => {\n                if (element.type === 'text' &&\n                    element.dataset.bind === prop) {\n                    // make sure to update only that match with data-binding\n                    element.value = value;\n                }\n                else {\n                    // {username} > johny<!--{username}-->\n                    templates.updateVarHTMLOnChange(element, varObj, prop, value);\n                    templates.updateVarAttrOnChange(element, prop, value);\n                    events.createEventListener(self);\n                }\n            });\n            varObj[prop] = value;\n            return true;\n        }\n    };\n    return new Proxy(varObj, handler);\n};\nexport default {\n    createReactive,\n};\n", "export const addDataBindListener = (self) => {\n    // add any event data-bind listener\n    const elementWithDataBind = self.shadowRoot.querySelectorAll(\"[data-bind]\");\n    elementWithDataBind.forEach((element) => {\n        if (element.type === \"text\") {\n            element.addEventListener(\"input\", (e) => {\n                self.__reactive[e.target.getAttribute('data-bind')] = e.target.value;\n            });\n        }\n    });\n    // add any event data-bind listener\n};\nexport default {\n    addDataBindListener\n};\n", "// (variable) -> variable\nexport const stripParenthesis = (value) => {\n    return value[0].replace(/[()]/g, '');\n};\n// {variable} -> variable\nexport const strip = (value, start, end) => {\n    return value.split(start)[1].split(end)[0];\n};\nexport const addQuote = (val) => {\n    if (isNaN(val) && !val.startsWith('\\'')) {\n        return `'${val}'`;\n    }\n    else {\n        return val;\n    }\n};\n// surround args multiple value with quote\nexport const addQuoteItems = (value) => {\n    const result = value.map((r) => {\n        return addQuote(r);\n    });\n    return result;\n};\nexport default {\n    stripParenthesis,\n    strip,\n    addQuote,\n    addQuoteItems\n};\n", "import utils from './utils.js';\nimport { settings } from './enums.js';\nexport const updateVarAttrOnLoad = (self, element) => {\n    for (const [_, attr] of Object.entries(element.attributes)) {\n        const updatedFnArgs = updateEventFunctionArgs(self, attr.name, attr.value);\n        if (updatedFnArgs) {\n            // data-onclick-kuqrlat7 suffix hash timestamp to make sure its unique event\n            element.setAttribute(`data-${attr.name.replace(settings.ATTR_PREFIX, 'on')}-${(+new Date).toString(36)}`, updatedFnArgs);\n            // remove @click attributes\n            element.removeAttribute(`${attr.name}`);\n        }\n    }\n};\nexport const updateVarHTMLOnLoad = (self, element) => {\n    // replace with real value {username} > johnny,\n    element.innerHTML.split(' ').forEach(text => {\n        if (getVar(text)) {\n            const var1 = getVar(text)[0];\n            const cleanVar = utils.strip(text, settings.VAR_PARSE.start, settings.VAR_PARSE.end);\n            const cmpAttr = Array.from(self.attributes).find((e) => e.name === cleanVar);\n            let result = null;\n            if (self[cleanVar] != undefined) { // applies to shadow var only\n                result = self[cleanVar];\n            }\n            else if (self.__reactive[cleanVar] != undefined) { // applies for reactive variable\n                result = self.__reactive[cleanVar];\n            }\n            else if (cmpAttr) { // applies to component var\n                result = cmpAttr.value;\n            }\n            if (result) {\n                element.innerHTML = element.innerHTML.replaceAll(var1, `${result}<!--${cleanVar}-->`);\n            }\n        }\n    });\n};\nexport const updateVarHTMLOnChange = (element, reactiveObj, varName, varValue) => {\n    element.innerHTML = element.innerHTML.replaceAll(`${reactiveObj[varName]}<!--${varName}-->`, `${varValue}<!--${varName}-->`);\n};\n// extrac (variable1, variable2)\nconst getFunctionArgs = (value) => {\n    return value.match(/\\(.+\\)/g);\n};\nconst updateEventFunctionArgs = (self, attrName, attrVal) => {\n    if (attrName.startsWith(settings.ATTR_PREFIX)) {\n        const functionArgs = utils.strip(getFunctionArgs(attrVal)[0], '(', ')');\n        const finalArgs = [];\n        const commentArgs = [];\n        let argsUpdateOk = true;\n        functionArgs.split(',').forEach((e) => {\n            let arg = '';\n            let cleanArg = '';\n            if (getVar(e) != undefined) {\n                arg = getVar(e)[0];\n                cleanArg = utils.strip(arg, settings.VAR_PARSE.start, settings.VAR_PARSE.end);\n            }\n            else {\n                arg = e.trim();\n                cleanArg = e.trim();\n            }\n            // console.log(self[arg], arg, reactiveObj)\n            if (parseInt(cleanArg)) {\n                finalArgs.push(parseInt(cleanArg));\n                commentArgs.push(parseInt(arg));\n            }\n            else if (cleanArg.startsWith('\\'') || cleanArg === '$event') {\n                // handling str args or $event args\n                finalArgs.push(cleanArg); // if string remove \"'1234'\"\n                commentArgs.push(arg);\n            }\n            else if (self[cleanArg] !== undefined) {\n                finalArgs.push(self[cleanArg]);\n                commentArgs.push(arg);\n            }\n            else if (self.__reactive[cleanArg] !== undefined) {\n                finalArgs.push(self.__reactive[cleanArg]);\n                commentArgs.push(arg);\n            }\n            else if (self[cleanArg] === undefined && self.__reactive[cleanArg] === undefined) {\n                console.warn(`event args ${cleanArg} unable to parse ${attrVal}`);\n                argsUpdateOk = false;\n                return;\n            }\n        });\n        if (argsUpdateOk) {\n            let tmp = utils.addQuoteItems(finalArgs);\n            tmp = `(${tmp})/*${commentArgs.join(',')}*/`;\n            const result = attrVal.replaceAll(/\\((.+)\\)/g, `${tmp}`);\n            return result;\n        }\n    }\n};\nconst getArgLocation = (attrVal, prop) => {\n    // get Args location\n    let result;\n    const commentArgs = utils.strip(attrVal, '/*', '*/');\n    commentArgs.split(',').forEach((val, index) => {\n        if (val.startsWith(settings.VAR_PARSE.start) && val.endsWith(settings.VAR_PARSE.end) && prop == utils.strip(val, settings.VAR_PARSE.start, settings.VAR_PARSE.end)) {\n            result = index;\n        }\n    });\n    return result;\n    // get Args location\n};\nconst getOldArgs = (attrVal) => {\n    const result = utils.strip(getFunctionArgs(attrVal)[0], '(', ')');\n    return result;\n};\nconst getNewArgs = (oldArgs, argLocation, newVal) => {\n    // get Value to update\n    const result = [];\n    oldArgs.split(',').forEach((val, index) => {\n        if (index === argLocation) {\n            result.push(utils.addQuote(newVal));\n        }\n        else {\n            result.push(val);\n        }\n    });\n    return result;\n    // get Value to update\n};\nexport const updateVarAttrOnChange = (element, prop, value) => {\n    for (const [_, attr] of Object.entries(element.attributes)) {\n        if (attr.name.startsWith('data-on') &&\n            attr.value.includes(`{${prop}}`) // make sure to only update those with changes\n        ) {\n            const argLocation = getArgLocation(attr.value, prop);\n            const oldArgs = getOldArgs(attr.value);\n            const newArgs = getNewArgs(oldArgs, argLocation, value);\n            const finalAttribute = attr.value.replaceAll(`${oldArgs}`, `${newArgs}`);\n            element.setAttribute(`${attr.name}`, finalAttribute);\n        }\n    }\n};\n// extract {variable}\nconst getVar = (value) => {\n    return value.match(/\\{.+\\}/g);\n};\nexport const updateTemplate = (self) => {\n    // interpolate variable\n    const allElements = self.shadowRoot.querySelectorAll('*');\n    allElements.forEach((element) => {\n        updateVarHTMLOnLoad(self, element);\n        updateVarAttrOnLoad(self, element);\n    });\n};\nexport default {\n    updateTemplate,\n    updateVarHTMLOnChange,\n    updateVarAttrOnChange\n};\n", "import events from './events.js';\nimport reactive from './reactive.js';\nimport bindings from './bindings.js';\nimport templates from './template.js';\nexport class LibWeb {\n    constructor(shadowDom, template) {\n        this.makeReactive = (varObj) => {\n            // add data-bind listener and variable to react when there is an event\n            bindings.addDataBindListener(this.self);\n            // make variable reactive\n            return reactive.createReactive(this.self, varObj, events, templates);\n        };\n        this.self = shadowDom;\n        this.self.attachShadow({ mode: 'open' });\n        this.self.shadowRoot.innerHTML = template; // inject\n        templates.updateTemplate(this.self);\n        events.createEventListener(this.self);\n        this.self.__reactive = this.makeReactive(this.self.__reactive);\n    }\n}\nexport class LWElement extends HTMLElement {\n    constructor() {\n        super();\n    }\n    connectedCallback() {\n        const lw = new LibWeb(this, this.__template);\n    }\n}\nexport default {\n    LibWeb,\n    LWElement\n};\n"],
  "mappings": "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",
  "names": []
}
