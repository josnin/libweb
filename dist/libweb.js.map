{
  "version": 3,
  "sources": ["../src/directives/if.directive.js", "../src/directives/bind.directive.js", "../src/utils.js", "../src/directives/event.directive.js", "../src/directives/for.directive.js", "../src/directives/directives.js", "../src/enums.js", "../src/parsers/html.parser.js", "../src/parsers/attr.parser.js", "../src/pipes/json.pipe.js", "../src/pipes/pipes.js", "../src/parsers/htmlr.parser.js", "../src/parsers/inputr.parser.js", "../src/parsers/html-pipe.parser.js", "../src/parsers/parsers.js", "../src/libweb.js"],
  "sourcesContent": ["export const ifDirective = async (self, el, prop, val) => {\n    const If = await el.getAttribute('If');\n    if (If && !self[If] && !self.__reactive[If]) {\n        el.style.display = 'none';\n    }\n};\n", "export const bindDirective = async (self, el, prop, val) => {\n    const bind = await el.getAttribute('data-bind');\n    if (el.type === \"text\" && bind) {\n        el['oninput'] = (e) => {\n            self.__reactive[bind] = e.target.value;\n        };\n    }\n};\n", "// (variable) -> variable\nexport const stripParenthesis = (value) => {\n    return value[0].replace(/[()]/g, '');\n};\n// {variable} -> variable\nexport const strip = (val, start, end) => {\n    return val.replace(start, '').replace(end, '').trim();\n};\nexport const addQuote = (val) => {\n    if (isNaN(val) && !val.startsWith('\\'')) {\n        return `'${val}'`;\n    }\n    else {\n        return val;\n    }\n};\n// surround args multiple value with quote\nexport const addQuoteItems = (value) => {\n    const result = value.map((r) => {\n        return addQuote(r);\n    });\n    return result;\n};\n// extract {variable}\nexport const getVar = (val) => {\n    return val.match(/{[^{^}^\\|]*}/gi);\n};\n// extract { var | json }\nexport const getVarWPipe = (val) => {\n    return val.match(/\\{[^{^}\\n\\r]*\\|[^{^}\\n\\r]*\\}/gi);\n};\nexport const getVal = (self, prop) => {\n    let res;\n    if (self[prop] != undefined) { // applies to shadow var only\n        res = self[prop];\n    }\n    else if (self.__reactive[prop] != undefined) { // applies for reactive variable\n        res = self.__reactive[prop];\n    }\n    else {\n        res = prop;\n    }\n    return res;\n};\nexport default {\n    stripParenthesis,\n    strip,\n    addQuote,\n    addQuoteItems,\n    getVar,\n    getVarWPipe,\n    getVal\n};\n", "import { getVal } from '../utils.js';\nexport const eventDirective = async (self, el) => {\n    if (el.dataset.event) {\n        el[`on${el.dataset.event}`] = async ($event) => {\n            try {\n                // exec normal func\n                const fArgs = [];\n                await el.dataset.args.split(',').forEach((arg) => {\n                    // args aka prop\n                    const res = getVal(self, arg.trim());\n                    if (res) {\n                        fArgs.push(`'${res}'`);\n                    }\n                });\n                const fFn = `${el.dataset.fn}(${fArgs.join()})`;\n                Function(`this.self.${fFn.replaceAll('\\'$event\\'', 'this.$event')}`).call({ self, $event });\n            }\n            catch {\n                // exec direct js, i.e alert(1)\n                Function(`${el.value.replaceAll('\\'$event\\'', 'this.$event')}`).call({ $event });\n            }\n        };\n    }\n};\n", "import { getVal } from \"../utils.js\";\n// <div For=\"i in items\"> {i.x} </div>\nexport const forDirective = async (self, el, prop, val) => {\n    const For = await el.getAttribute('*For');\n    if (For) {\n        let [alias, items] = For.split('in');\n        items = items.trim();\n        alias = alias.trim();\n        const res = getVal(self, items);\n        // el.removeAttribute('*For');\n        if (!el.dataset?.uniq) {\n            el.dataset.uniq = 'l2rkqnta__'; // whatever?\n        }\n        const uniq = (+new Date).toString(36);\n        console.log('BEGIN', el.dataset.uniq);\n        // refresh list?\n        await res.forEach(async (v, idx) => {\n            const el2 = el.cloneNode(true);\n            await el2.childNodes.forEach((chld) => {\n                if (chld.dataset?.var) {\n                    chld.textContent = `${v[chld.dataset.var.split('.')[1]]} ${uniq}`;\n                    chld.dataset.index = idx;\n                }\n            });\n            el2.dataset.uniq = uniq;\n            //  console.log(uniq)\n            //el2.dataset.for = items;\n            //el2.dataset.alias = alias;\n            el.parentNode?.insertBefore(el2, el.nextSibling);\n        });\n        // clear expired list\n        await el.parentNode?.childNodes.forEach((e) => {\n            if (e.dataset?.uniq && e.dataset.uniq !== uniq) {\n                console.log('END', el.dataset.uniq, uniq);\n                e.remove();\n            }\n        });\n    }\n};\n", "import { ifDirective } from './if.directive.js';\nimport { bindDirective } from './bind.directive.js';\nimport { eventDirective } from './event.directive.js';\nimport { forDirective } from './for.directive.js';\nexport class Directives {\n    constructor(...args) {\n        this.register = [\n            ifDirective,\n            bindDirective,\n            eventDirective,\n            forDirective\n        ];\n        this.args = args;\n    }\n    apply() {\n        const [self, prop, val] = this.args;\n        this.register.forEach(d => {\n            self.shadowRoot.querySelectorAll('*').forEach(async (el) => {\n                await d(self, el, prop, val);\n            });\n        });\n    }\n}\nexport default {\n    Directives\n};\n", "export const settings = {\n    ATTR_PREFIX: '__',\n    ATTR_REPLACE: 'on',\n    VAR_PARSE: { start: '{', end: '}' },\n};\n", "import { strip, getVal } from '../utils.js';\nimport { settings } from '../enums.js';\nexport const htmlParser = async (self, el) => {\n    // replace with real value {username} > johnny,\n    const allVars = el.textContent?.match(/{[^{^}^\\|]*}/gi);\n    if (!allVars) {\n        return;\n    }\n    await allVars.forEach(async (text) => {\n        text = text.trim();\n        if (text) {\n            const cleanVar = strip(text, settings.VAR_PARSE.start, settings.VAR_PARSE.end);\n            const res = getVal(self, cleanVar);\n            if (res) {\n                el.innerHTML = el.innerHTML.replaceAll(text, `<lib-w data-var=${cleanVar}>${res}</lib-w>`);\n            }\n        }\n    });\n};\n", "export const attrParser = async (self, el, prop, val) => {\n    for (const [_, attr] of Object.entries(el.attributes)) {\n        if (attr.name.startsWith('@')) {\n            el.dataset.event = attr.name.split('@')[1];\n            el.dataset.fn = attr.value.split('(')[0];\n            el.dataset.args = attr.value.split('(')[1].split(')')[0];\n            el.removeAttribute(attr.name);\n        }\n    }\n};\n", "export const jsonPipe = (val, name) => {\n    if (name === 'json') {\n        return JSON.stringify(val);\n    }\n    return val;\n};\n", "import { jsonPipe } from './json.pipe.js';\nexport class Pipes {\n    constructor(...args) {\n        this.register = [jsonPipe];\n        this.args = args;\n    }\n    apply() {\n        const [val, name] = this.args;\n        let res;\n        if (name) {\n            res = val;\n            this.register.forEach(d => {\n                res = d(res, name);\n            });\n        }\n        return res;\n    }\n}\n", "import { Pipes } from '../pipes/pipes.js';\nexport const htmlVarReactive = async (self, el, prop, val) => {\n    if (el.dataset.var !== undefined && el.dataset.var === prop) {\n        let fVal = val;\n        if (el.dataset.pipe) {\n            const pipeName = el.dataset.pipe;\n            const pipes = new Pipes(fVal, pipeName);\n            fVal = await pipes.apply();\n        }\n        el.textContent = fVal;\n    }\n};\n", "export const inputValReactive = (self, el, prop, val) => {\n    if (el.type === 'text' &&\n        el.dataset.bind === prop) {\n        // make sure to update only that match with data-binding\n        el.value = val;\n    }\n};\n", "import { strip, getVal } from '../utils.js';\nimport { Pipes } from '../pipes/pipes.js';\nimport { settings } from '../enums.js';\nexport const htmlPipeParser = async (self, el) => {\n    // replace with real value { username | upper } > JOHNNY,\n    const varWPipe = await el.textContent?.match(/\\{[^{^}\\n\\r]*\\|[^{^}\\n\\r]*\\}/gi);\n    if (!varWPipe) {\n        return;\n    }\n    varWPipe.forEach(async (text) => {\n        text = text.trim();\n        if (text) {\n            const tmp = strip(text, settings.VAR_PARSE.start, settings.VAR_PARSE.end);\n            const wPipe = tmp.split('|').length > 1;\n            const cleanVar = tmp.split('|')[0].trim();\n            let res = await getVal(self, cleanVar);\n            if (res && wPipe) {\n                const pipeName = tmp.split('|')[1].trim();\n                const pipes = new Pipes(res, pipeName);\n                res = await pipes.apply();\n                el.innerHTML = await el.innerHTML.replaceAll(text, `<lib-w data-var=${cleanVar} data-pipe=${pipeName}>${res}</lib-w>`);\n            }\n        }\n    });\n};\n", "import { htmlParser } from './html.parser.js';\nimport { attrParser } from './attr.parser.js';\nimport { htmlVarReactive } from './htmlr.parser.js';\nimport { inputValReactive } from './inputr.parser.js';\nimport { htmlPipeParser } from './html-pipe.parser.js';\nexport class Parsers {\n    constructor(...args) {\n        this.register = [\n            htmlParser,\n            htmlPipeParser,\n            attrParser,\n            inputValReactive,\n            htmlVarReactive\n        ];\n        this.args = args;\n    }\n    apply() {\n        const [self, prop, val] = this.args;\n        this.register.forEach(d => {\n            self.shadowRoot.querySelectorAll('*').forEach(async (el) => {\n                await d(self, el, prop, val);\n            });\n        });\n    }\n}\nexport default {\n    Parsers,\n};\n", "import { Directives } from './directives/directives.js';\nimport { Parsers } from './parsers/parsers.js';\nclass LibW extends HTMLElement {\n}\ncustomElements.define('lib-w', LibW);\nexport class LibWeb {\n    constructor(shadowDom, template) {\n        this.makeReactive = (varObj) => {\n            // react when there is a changes in value\n            const handler = {\n                get: (varObj, prop) => {\n                    if (typeof varObj[prop] === 'object' && varObj[prop] !== null) {\n                        return new Proxy(varObj[prop], handler);\n                    }\n                    else {\n                        return varObj[prop];\n                    }\n                },\n                set: (varObj, prop, value) => {\n                    this.runParserAndDirectives(prop, value);\n                    varObj[prop] = value;\n                    return true;\n                }\n            };\n            return new Proxy(varObj, handler);\n        };\n        this.self = shadowDom;\n        this.self.attachShadow({ mode: 'open' });\n        this.self.shadowRoot.innerHTML = `<lib-w>${template} <slot></slot></lib-w>`; // inject\n        // this.self.shadowRoot.innerHTML = template;\n        this.runParserAndDirectives();\n        this.self.__reactive = this.makeReactive(this.self.__reactive);\n        console.log(this.self);\n    }\n    async runParserAndDirectives(prop = '', val = '') {\n        const parsers = new Parsers(this.self, prop, val);\n        await parsers.apply();\n        const directives = new Directives(this.self, prop, val);\n        await directives.apply();\n    }\n}\nexport class LWElement extends HTMLElement {\n    constructor() {\n        super();\n        this.__reactive = {}; // { username: 'darling' }\n    }\n    connectedCallback() {\n        const lw = new LibWeb(this, this.__template);\n    }\n}\nexport default {\n    LibWeb,\n    LWElement\n};\n"],
  "mappings": "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",
  "names": []
}
